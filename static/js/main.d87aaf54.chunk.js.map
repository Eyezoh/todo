{"version":3,"sources":["Adder.js","Navigation.js","Todo.js","NewAdder.js","Tododata.js","ChangeName.js","App.js","serviceWorker.js","index.js"],"names":["AdderFunc","state","count","handleClick","bind","this","setState","prevState","onClick","React","Component","Navi","className","TodoApp","name","console","log","props","product","type","checked","completed","title","Adder2","useState","setCount","myList","NameChanger","names","nameSwitch","App","todos","myProgram","map","item","Todo","key","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qOA2BgBA,E,kDAxBX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,MAAM,GAEV,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALV,E,0DAQTC,KAAKC,UAAS,SAACC,GACX,MAAO,CACHL,MAAMK,EAAUL,MAAM,Q,+BAM9B,OACI,6BACI,4BAAKG,KAAKJ,MAAMC,OAChB,4BAAQM,QAASH,KAAKF,aAAtB,Y,GApBQM,IAAMC,WCgBhBC,E,uKAdP,OACI,6BACI,yBAAKC,UAAU,aACX,sCACA,wBAAIA,UAAU,SACV,wBAAIA,UAAU,cAAd,SACA,wBAAIA,UAAU,cAAd,qB,GARLH,IAAMC,WCoBVG,E,kDAlBX,aAAc,IAAD,8BACT,gBACKZ,MAAQ,CACTa,KAAK,SAHA,E,qDAUT,OAFAC,QAAQC,IAAIX,KAAKY,MAAMC,SAGnB,yBAAKN,UAAU,cACf,2BAAOA,UAAU,aAAaO,KAAK,WAAWC,QAASf,KAAKY,MAAMC,QAAQG,YACtE,4BAAKhB,KAAKY,MAAMC,QAAQI,Y,GAdlBb,IAAMC,W,OCDZ,SAASa,IAAS,IAAD,EAEHC,mBAAS,GAFN,mBAEtBtB,EAFsB,KAEfuB,EAFe,KAS5B,OACA,6BACI,4BAAKvB,GACL,4BAAQM,QARC,WACViB,EAASvB,EAAM,KAOd,aCdT,IAkDewB,EAlDA,CACX,CACI,OAAU,EACV,GAAM,EACN,MAAS,gBACT,WAAa,GAEf,CACE,OAAU,EACV,GAAM,EACN,MAAS,kBACT,WAAa,GAEf,CACE,OAAU,EACV,GAAM,EACN,MAAS,WACT,WAAa,GAEf,CACE,OAAU,EACV,GAAM,EACN,MAAS,UACT,WAAa,GAEf,CACE,OAAU,EACV,GAAM,EACN,MAAS,eACT,WAAa,GAEf,CACE,OAAU,EACV,GAAM,EACN,MAAS,eACT,WAAa,GAEf,CACE,OAAU,EACV,GAAM,EACN,MAAS,gBACT,WAAa,GAEf,CACE,OAAU,EACV,GAAM,EACN,MAAS,uBACT,WAAa,IC5CN,SAASC,IAAc,IAAD,EAERH,mBAAS,SAFD,mBAE9BI,EAF8B,KAEtBC,EAFsB,KAQjC,OACI,iCACK,4BAAKD,GACN,4BAAQpB,QAPD,WACfqB,EAAW,UAMH,W,IC6BGC,E,kDA/Bb,aAAc,IAAD,8BACX,gBACK7B,MAAQ,CACX8B,MAAML,GAHG,E,qDAOX,IAAMM,EAAY3B,KAAKJ,MAAM8B,MAAME,KAAI,SAAAC,GAAI,OAAI,kBAACC,EAAD,CAASC,IAAKF,EAAKG,GAAInB,QAASgB,OAGjF,OACE,yBAAKtB,UAAU,OACf,kBAAC,EAAD,MAEE,4BAAQA,UAAU,cAChB,2CACA,kBAAC,EAAD,MACCoB,EACF,kBAACT,EAAD,MAEA,kBAACI,EAAD,Y,GArBWlB,IAAMC,WCCJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,a","file":"static/js/main.d87aaf54.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n class AdderFunc extends React.Component{\r\n     constructor(){\r\n         super()\r\n         this.state = {\r\n             count:0\r\n         }\r\n         this.handleClick = this.handleClick.bind(this)\r\n     }\r\n     handleClick(){\r\n         this.setState((prevState)=>{\r\n             return {\r\n                 count:prevState.count+1\r\n             }\r\n\r\n         })\r\n     }\r\n     render(){\r\n         return(\r\n             <div>\r\n                 <h1>{this.state.count}</h1>\r\n                 <button onClick={this.handleClick}>Add</button>\r\n             </div>\r\n         )\r\n     }\r\n }\r\n export default AdderFunc","import React from 'react'\r\n\r\nclass Navi extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <nav className=\"nav-links\">\r\n                    <h2>To Do </h2>\r\n                    <ul className=\"links\">\r\n                        <li className=\"links-menu\">About</li>\r\n                        <li className=\"links-menu\">To Do List</li>\r\n                        \r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Navi","import React from 'react'\r\n\r\n\r\nclass TodoApp extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            name:\"Isaac\"\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        console.log(this.props.product)\r\n     \r\n        return(\r\n            <div className='todo_items'>\r\n            <input className='check_item' type=\"checkbox\" checked={this.props.product.completed}/>\r\n                <h3>{this.props.product.title}</h3> \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TodoApp","import React,{useState} from 'react'\r\n\r\n export default function Adder2(){\r\n\r\n    const [count, setCount] = useState(0)\r\n\r\n    const Adder = ()=>{\r\n        setCount(count-1)\r\n    }\r\n\r\n\r\n     return(\r\n     <div>\r\n         <h2>{count}</h2>\r\n         <button onClick={Adder}>Subtract</button>\r\n         \r\n         </div>)\r\n\r\n }","const myList = [\r\n    {\r\n        \"userId\": 1,\r\n        \"id\": 1,\r\n        \"title\": \"Clean my room\",\r\n        \"completed\": false\r\n      },\r\n      {\r\n        \"userId\": 1,\r\n        \"id\": 2,\r\n        \"title\": \"sweep the house\",\r\n        \"completed\": false\r\n      },\r\n      {\r\n        \"userId\": 1,\r\n        \"id\": 3,\r\n        \"title\": \"fumigate\",\r\n        \"completed\": false\r\n      },\r\n      {\r\n        \"userId\": 1,\r\n        \"id\": 4,\r\n        \"title\": \"Laundry\",\r\n        \"completed\": true\r\n      },\r\n      {\r\n        \"userId\": 1,\r\n        \"id\": 5,\r\n        \"title\": \"polish shoes\",\r\n        \"completed\": false\r\n      },\r\n      {\r\n        \"userId\": 1,\r\n        \"id\": 6,\r\n        \"title\": \"mow the lawn\",\r\n        \"completed\": false\r\n      },\r\n      {\r\n        \"userId\": 1,\r\n        \"id\": 7,\r\n        \"title\": \"milk the cows\",\r\n        \"completed\": false\r\n      },\r\n      {\r\n        \"userId\": 1,\r\n        \"id\": 8,\r\n        \"title\": \"throw away the trash\",\r\n        \"completed\": true\r\n      },\r\n]\r\nexport default myList","import React, {useState} from 'react'\r\n \r\n\r\nexport default function NameChanger(){\r\n\r\nconst [names , nameSwitch] = useState(\"Isaac\")  \r\n\r\nconst switchName = ()=>{\r\n    nameSwitch('Amum')\r\n}\r\n\r\n    return(\r\n        <div>\r\n            M<h1>{names}</h1>\r\n            <button onClick={switchName}>change</button>\r\n        </div>\r\n        \r\n    )\r\n}","import React from 'react';\nimport './App.css';\n\nimport AdderFunc from './Adder'\nimport Navi from './Navigation'\nimport TodoApp from './Todo'\nimport Adder2 from './NewAdder'\n\nimport myList from './Tododata'\nimport NameChanger from './ChangeName'\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      todos:myList\n    }\n  }\n  render(){\n    const myProgram = this.state.todos.map(item => <TodoApp key={item.id} product={item}/>)\n  \n\n  return (\n    <div className=\"App\">\n    <Navi />\n   \n      <header className=\"App-header\">\n        <p>my to do App</p>\n        <AdderFunc />\n        {myProgram }\n       <Adder2 />\n\n       <NameChanger />\n        \n      </header>\n  \n     \n    </div>\n  );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}